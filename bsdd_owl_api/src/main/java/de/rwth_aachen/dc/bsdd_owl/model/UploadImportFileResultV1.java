/*
 * bSDD API prototype
 * API to access the buildingSMART Data Dictionary
 *
 * OpenAPI spec version: v1
 * Contact: bsdd_support@buildingsmart.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.rwth_aachen.dc.bsdd_owl.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * UploadImportFileResultV1
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-09-21T11:35:32.475Z[GMT]")
public class UploadImportFileResultV1 {
  @SerializedName("isOk")
  private Boolean isOk = null;

  @SerializedName("errors")
  private List<UploadImportFileResultItemV1> errors = null;

  @SerializedName("warnings")
  private List<UploadImportFileResultItemV1> warnings = null;

  @SerializedName("informationalMessages")
  private List<UploadImportFileResultItemV1> informationalMessages = null;

  public UploadImportFileResultV1 isOk(Boolean isOk) {
    this.isOk = isOk;
    return this;
  }

   /**
   * Indicates if the file will be imported.  Warnings are allowed, import will continue but may lead to undesired values in the database.
   * @return isOk
  **/
  @Schema(description = "Indicates if the file will be imported.  Warnings are allowed, import will continue but may lead to undesired values in the database.")
  public Boolean isIsOk() {
    return isOk;
  }

  public void setIsOk(Boolean isOk) {
    this.isOk = isOk;
  }

  public UploadImportFileResultV1 errors(List<UploadImportFileResultItemV1> errors) {
    this.errors = errors;
    return this;
  }

  public UploadImportFileResultV1 addErrorsItem(UploadImportFileResultItemV1 errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<UploadImportFileResultItemV1>();
    }
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * The list of errors found.  It may happen that if you fix one error new errors will be discovered.
   * @return errors
  **/
  @Schema(description = "The list of errors found.  It may happen that if you fix one error new errors will be discovered.")
  public List<UploadImportFileResultItemV1> getErrors() {
    return errors;
  }

  public void setErrors(List<UploadImportFileResultItemV1> errors) {
    this.errors = errors;
  }

  public UploadImportFileResultV1 warnings(List<UploadImportFileResultItemV1> warnings) {
    this.warnings = warnings;
    return this;
  }

  public UploadImportFileResultV1 addWarningsItem(UploadImportFileResultItemV1 warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<UploadImportFileResultItemV1>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

   /**
   * List of warnings.  It is best to have no warnings at all to avoid inconsistent or incorrect values in the database
   * @return warnings
  **/
  @Schema(description = "List of warnings.  It is best to have no warnings at all to avoid inconsistent or incorrect values in the database")
  public List<UploadImportFileResultItemV1> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<UploadImportFileResultItemV1> warnings) {
    this.warnings = warnings;
  }

  public UploadImportFileResultV1 informationalMessages(List<UploadImportFileResultItemV1> informationalMessages) {
    this.informationalMessages = informationalMessages;
    return this;
  }

  public UploadImportFileResultV1 addInformationalMessagesItem(UploadImportFileResultItemV1 informationalMessagesItem) {
    if (this.informationalMessages == null) {
      this.informationalMessages = new ArrayList<UploadImportFileResultItemV1>();
    }
    this.informationalMessages.add(informationalMessagesItem);
    return this;
  }

   /**
   * Informational messages
   * @return informationalMessages
  **/
  @Schema(description = "Informational messages")
  public List<UploadImportFileResultItemV1> getInformationalMessages() {
    return informationalMessages;
  }

  public void setInformationalMessages(List<UploadImportFileResultItemV1> informationalMessages) {
    this.informationalMessages = informationalMessages;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadImportFileResultV1 uploadImportFileResultV1 = (UploadImportFileResultV1) o;
    return Objects.equals(this.isOk, uploadImportFileResultV1.isOk) &&
        Objects.equals(this.errors, uploadImportFileResultV1.errors) &&
        Objects.equals(this.warnings, uploadImportFileResultV1.warnings) &&
        Objects.equals(this.informationalMessages, uploadImportFileResultV1.informationalMessages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isOk, errors, warnings, informationalMessages);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadImportFileResultV1 {\n");
    
    sb.append("    isOk: ").append(toIndentedString(isOk)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("    informationalMessages: ").append(toIndentedString(informationalMessages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
