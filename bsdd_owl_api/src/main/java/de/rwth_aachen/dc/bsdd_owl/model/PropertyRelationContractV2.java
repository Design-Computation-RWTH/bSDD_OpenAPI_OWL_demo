/*
 * bSDD API prototype
 * API to access the buildingSMART Data Dictionary
 *
 * OpenAPI spec version: v1
 * Contact: bsdd_support@buildingsmart.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.rwth_aachen.dc.bsdd_owl.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * PropertyRelationContractV2
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-09-21T11:35:32.475Z[GMT]")
public class PropertyRelationContractV2 {
  @SerializedName("relationType")
  private String relationType = null;

  @SerializedName("relatedPropertyUri")
  private String relatedPropertyUri = null;

  @SerializedName("relatedPropertyName")
  private String relatedPropertyName = null;

  public PropertyRelationContractV2 relationType(String relationType) {
    this.relationType = relationType;
    return this;
  }

   /**
   * The relation with the other property: e.g. HasReference, IsEqualTo
   * @return relationType
  **/
  @Schema(description = "The relation with the other property: e.g. HasReference, IsEqualTo")
  public String getRelationType() {
    return relationType;
  }

  public void setRelationType(String relationType) {
    this.relationType = relationType;
  }

  public PropertyRelationContractV2 relatedPropertyUri(String relatedPropertyUri) {
    this.relatedPropertyUri = relatedPropertyUri;
    return this;
  }

   /**
   * Namespace URI of the related property
   * @return relatedPropertyUri
  **/
  @Schema(description = "Namespace URI of the related property")
  public String getRelatedPropertyUri() {
    return relatedPropertyUri;
  }

  public void setRelatedPropertyUri(String relatedPropertyUri) {
    this.relatedPropertyUri = relatedPropertyUri;
  }

  public PropertyRelationContractV2 relatedPropertyName(String relatedPropertyName) {
    this.relatedPropertyName = relatedPropertyName;
    return this;
  }

   /**
   * Name of the related property
   * @return relatedPropertyName
  **/
  @Schema(description = "Name of the related property")
  public String getRelatedPropertyName() {
    return relatedPropertyName;
  }

  public void setRelatedPropertyName(String relatedPropertyName) {
    this.relatedPropertyName = relatedPropertyName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyRelationContractV2 propertyRelationContractV2 = (PropertyRelationContractV2) o;
    return Objects.equals(this.relationType, propertyRelationContractV2.relationType) &&
        Objects.equals(this.relatedPropertyUri, propertyRelationContractV2.relatedPropertyUri) &&
        Objects.equals(this.relatedPropertyName, propertyRelationContractV2.relatedPropertyName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(relationType, relatedPropertyUri, relatedPropertyName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyRelationContractV2 {\n");
    
    sb.append("    relationType: ").append(toIndentedString(relationType)).append("\n");
    sb.append("    relatedPropertyUri: ").append(toIndentedString(relatedPropertyUri)).append("\n");
    sb.append("    relatedPropertyName: ").append(toIndentedString(relatedPropertyName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
