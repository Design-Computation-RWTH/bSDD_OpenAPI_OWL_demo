/*
 * bSDD API prototype
 * API to access the buildingSMART Data Dictionary
 *
 * OpenAPI spec version: v1
 * Contact: bsdd_support@buildingsmart.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.rwth_aachen.dc.bsdd_owl.model;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * ClassificationContractV3
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-09-21T11:35:32.475Z[GMT]")
public class ClassificationContractV3 {
  @SerializedName("synonyms")
  private List<String> synonyms = null;

  @SerializedName("relatedIfcEntityNames")
  private List<String> relatedIfcEntityNames = null;

  @SerializedName("parentClassificationReference")
  private ClassificationReferenceContractV3 parentClassificationReference = null;

  @SerializedName("classificationProperties")
  private List<ClassificationPropertyContractV3> classificationProperties = null;

  @SerializedName("classificationRelations")
  private List<ClassificationRelationContractV3> classificationRelations = null;

  @SerializedName("childClassificationReferences")
  private List<ClassificationReferenceContractV3> childClassificationReferences = null;

  @SerializedName("activationDateUtc")
  private OffsetDateTime activationDateUtc = null;

  @SerializedName("code")
  private String code = null;

  @SerializedName("creatorLanguageCode")
  private String creatorLanguageCode = null;

  @SerializedName("countriesOfUse")
  private List<String> countriesOfUse = null;

  @SerializedName("countryOfOrigin")
  private String countryOfOrigin = null;

  @SerializedName("deActivationDateUtc")
  private OffsetDateTime deActivationDateUtc = null;

  @SerializedName("definition")
  private String definition = null;

  @SerializedName("deprecationExplanation")
  private String deprecationExplanation = null;

  @SerializedName("documentReference")
  private String documentReference = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("namespaceUri")
  private String namespaceUri = null;

  @SerializedName("replacedObjectCodes")
  private List<String> replacedObjectCodes = null;

  @SerializedName("replacingObjectCodes")
  private List<String> replacingObjectCodes = null;

  @SerializedName("revisionDateUtc")
  private OffsetDateTime revisionDateUtc = null;

  @SerializedName("revisionNumber")
  private Integer revisionNumber = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("subdivisionsOfUse")
  private List<String> subdivisionsOfUse = null;

  @SerializedName("uid")
  private String uid = null;

  @SerializedName("versionDateUtc")
  private OffsetDateTime versionDateUtc = null;

  @SerializedName("versionNumber")
  private Integer versionNumber = null;

  @SerializedName("visualRepresentationUri")
  private String visualRepresentationUri = null;

  public ClassificationContractV3 synonyms(List<String> synonyms) {
    this.synonyms = synonyms;
    return this;
  }

  public ClassificationContractV3 addSynonymsItem(String synonymsItem) {
    if (this.synonyms == null) {
      this.synonyms = new ArrayList<String>();
    }
    this.synonyms.add(synonymsItem);
    return this;
  }

   /**
   * List of synonyms for the classification
   * @return synonyms
  **/
  @Schema(description = "List of synonyms for the classification")
  public List<String> getSynonyms() {
    return synonyms;
  }

  public void setSynonyms(List<String> synonyms) {
    this.synonyms = synonyms;
  }

  public ClassificationContractV3 relatedIfcEntityNames(List<String> relatedIfcEntityNames) {
    this.relatedIfcEntityNames = relatedIfcEntityNames;
    return this;
  }

  public ClassificationContractV3 addRelatedIfcEntityNamesItem(String relatedIfcEntityNamesItem) {
    if (this.relatedIfcEntityNames == null) {
      this.relatedIfcEntityNames = new ArrayList<String>();
    }
    this.relatedIfcEntityNames.add(relatedIfcEntityNamesItem);
    return this;
  }

   /**
   * List of related IFC entity names (version independent)
   * @return relatedIfcEntityNames
  **/
  @Schema(description = "List of related IFC entity names (version independent)")
  public List<String> getRelatedIfcEntityNames() {
    return relatedIfcEntityNames;
  }

  public void setRelatedIfcEntityNames(List<String> relatedIfcEntityNames) {
    this.relatedIfcEntityNames = relatedIfcEntityNames;
  }

  public ClassificationContractV3 parentClassificationReference(ClassificationReferenceContractV3 parentClassificationReference) {
    this.parentClassificationReference = parentClassificationReference;
    return this;
  }

   /**
   * Get parentClassificationReference
   * @return parentClassificationReference
  **/
  @Schema(description = "")
  public ClassificationReferenceContractV3 getParentClassificationReference() {
    return parentClassificationReference;
  }

  public void setParentClassificationReference(ClassificationReferenceContractV3 parentClassificationReference) {
    this.parentClassificationReference = parentClassificationReference;
  }

  public ClassificationContractV3 classificationProperties(List<ClassificationPropertyContractV3> classificationProperties) {
    this.classificationProperties = classificationProperties;
    return this;
  }

  public ClassificationContractV3 addClassificationPropertiesItem(ClassificationPropertyContractV3 classificationPropertiesItem) {
    if (this.classificationProperties == null) {
      this.classificationProperties = new ArrayList<ClassificationPropertyContractV3>();
    }
    this.classificationProperties.add(classificationPropertiesItem);
    return this;
  }

   /**
   * List of the properties of this classification
   * @return classificationProperties
  **/
  @Schema(description = "List of the properties of this classification")
  public List<ClassificationPropertyContractV3> getClassificationProperties() {
    return classificationProperties;
  }

  public void setClassificationProperties(List<ClassificationPropertyContractV3> classificationProperties) {
    this.classificationProperties = classificationProperties;
  }

  public ClassificationContractV3 classificationRelations(List<ClassificationRelationContractV3> classificationRelations) {
    this.classificationRelations = classificationRelations;
    return this;
  }

  public ClassificationContractV3 addClassificationRelationsItem(ClassificationRelationContractV3 classificationRelationsItem) {
    if (this.classificationRelations == null) {
      this.classificationRelations = new ArrayList<ClassificationRelationContractV3>();
    }
    this.classificationRelations.add(classificationRelationsItem);
    return this;
  }

   /**
   * List of relations to other classifications, can be reference to classifications of other domains
   * @return classificationRelations
  **/
  @Schema(description = "List of relations to other classifications, can be reference to classifications of other domains")
  public List<ClassificationRelationContractV3> getClassificationRelations() {
    return classificationRelations;
  }

  public void setClassificationRelations(List<ClassificationRelationContractV3> classificationRelations) {
    this.classificationRelations = classificationRelations;
  }

  public ClassificationContractV3 childClassificationReferences(List<ClassificationReferenceContractV3> childClassificationReferences) {
    this.childClassificationReferences = childClassificationReferences;
    return this;
  }

  public ClassificationContractV3 addChildClassificationReferencesItem(ClassificationReferenceContractV3 childClassificationReferencesItem) {
    if (this.childClassificationReferences == null) {
      this.childClassificationReferences = new ArrayList<ClassificationReferenceContractV3>();
    }
    this.childClassificationReferences.add(childClassificationReferencesItem);
    return this;
  }

   /**
   * List of child classifications (only filled if requested)
   * @return childClassificationReferences
  **/
  @Schema(description = "List of child classifications (only filled if requested)")
  public List<ClassificationReferenceContractV3> getChildClassificationReferences() {
    return childClassificationReferences;
  }

  public void setChildClassificationReferences(List<ClassificationReferenceContractV3> childClassificationReferences) {
    this.childClassificationReferences = childClassificationReferences;
  }

  public ClassificationContractV3 activationDateUtc(OffsetDateTime activationDateUtc) {
    this.activationDateUtc = activationDateUtc;
    return this;
  }

   /**
   * Date of activation
   * @return activationDateUtc
  **/
  @Schema(required = true, description = "Date of activation")
  public OffsetDateTime getActivationDateUtc() {
    return activationDateUtc;
  }

  public void setActivationDateUtc(OffsetDateTime activationDateUtc) {
    this.activationDateUtc = activationDateUtc;
  }

  public ClassificationContractV3 code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Code used originally by the domain
   * @return code
  **/
  @Schema(required = true, description = "Code used originally by the domain")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public ClassificationContractV3 creatorLanguageCode(String creatorLanguageCode) {
    this.creatorLanguageCode = creatorLanguageCode;
    return this;
  }

   /**
   * Language code of the creator
   * @return creatorLanguageCode
  **/
  @Schema(description = "Language code of the creator")
  public String getCreatorLanguageCode() {
    return creatorLanguageCode;
  }

  public void setCreatorLanguageCode(String creatorLanguageCode) {
    this.creatorLanguageCode = creatorLanguageCode;
  }

  public ClassificationContractV3 countriesOfUse(List<String> countriesOfUse) {
    this.countriesOfUse = countriesOfUse;
    return this;
  }

  public ClassificationContractV3 addCountriesOfUseItem(String countriesOfUseItem) {
    if (this.countriesOfUse == null) {
      this.countriesOfUse = new ArrayList<String>();
    }
    this.countriesOfUse.add(countriesOfUseItem);
    return this;
  }

   /**
   * List of countries where used
   * @return countriesOfUse
  **/
  @Schema(description = "List of countries where used")
  public List<String> getCountriesOfUse() {
    return countriesOfUse;
  }

  public void setCountriesOfUse(List<String> countriesOfUse) {
    this.countriesOfUse = countriesOfUse;
  }

  public ClassificationContractV3 countryOfOrigin(String countryOfOrigin) {
    this.countryOfOrigin = countryOfOrigin;
    return this;
  }

   /**
   * Country of origin
   * @return countryOfOrigin
  **/
  @Schema(description = "Country of origin")
  public String getCountryOfOrigin() {
    return countryOfOrigin;
  }

  public void setCountryOfOrigin(String countryOfOrigin) {
    this.countryOfOrigin = countryOfOrigin;
  }

  public ClassificationContractV3 deActivationDateUtc(OffsetDateTime deActivationDateUtc) {
    this.deActivationDateUtc = deActivationDateUtc;
    return this;
  }

   /**
   * Date of deactivation
   * @return deActivationDateUtc
  **/
  @Schema(description = "Date of deactivation")
  public OffsetDateTime getDeActivationDateUtc() {
    return deActivationDateUtc;
  }

  public void setDeActivationDateUtc(OffsetDateTime deActivationDateUtc) {
    this.deActivationDateUtc = deActivationDateUtc;
  }

  public ClassificationContractV3 definition(String definition) {
    this.definition = definition;
    return this;
  }

   /**
   * Definition
   * @return definition
  **/
  @Schema(description = "Definition")
  public String getDefinition() {
    return definition;
  }

  public void setDefinition(String definition) {
    this.definition = definition;
  }

  public ClassificationContractV3 deprecationExplanation(String deprecationExplanation) {
    this.deprecationExplanation = deprecationExplanation;
    return this;
  }

   /**
   * Explanation of the deprecation
   * @return deprecationExplanation
  **/
  @Schema(description = "Explanation of the deprecation")
  public String getDeprecationExplanation() {
    return deprecationExplanation;
  }

  public void setDeprecationExplanation(String deprecationExplanation) {
    this.deprecationExplanation = deprecationExplanation;
  }

  public ClassificationContractV3 documentReference(String documentReference) {
    this.documentReference = documentReference;
    return this;
  }

   /**
   * Reference to a(n official) document
   * @return documentReference
  **/
  @Schema(description = "Reference to a(n official) document")
  public String getDocumentReference() {
    return documentReference;
  }

  public void setDocumentReference(String documentReference) {
    this.documentReference = documentReference;
  }

  public ClassificationContractV3 name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name
   * @return name
  **/
  @Schema(required = true, description = "Name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ClassificationContractV3 namespaceUri(String namespaceUri) {
    this.namespaceUri = namespaceUri;
    return this;
  }

   /**
   * Unique identification
   * @return namespaceUri
  **/
  @Schema(required = true, description = "Unique identification")
  public String getNamespaceUri() {
    return namespaceUri;
  }

  public void setNamespaceUri(String namespaceUri) {
    this.namespaceUri = namespaceUri;
  }

  public ClassificationContractV3 replacedObjectCodes(List<String> replacedObjectCodes) {
    this.replacedObjectCodes = replacedObjectCodes;
    return this;
  }

  public ClassificationContractV3 addReplacedObjectCodesItem(String replacedObjectCodesItem) {
    if (this.replacedObjectCodes == null) {
      this.replacedObjectCodes = new ArrayList<String>();
    }
    this.replacedObjectCodes.add(replacedObjectCodesItem);
    return this;
  }

   /**
   * List of codes of the replaced items
   * @return replacedObjectCodes
  **/
  @Schema(description = "List of codes of the replaced items")
  public List<String> getReplacedObjectCodes() {
    return replacedObjectCodes;
  }

  public void setReplacedObjectCodes(List<String> replacedObjectCodes) {
    this.replacedObjectCodes = replacedObjectCodes;
  }

  public ClassificationContractV3 replacingObjectCodes(List<String> replacingObjectCodes) {
    this.replacingObjectCodes = replacingObjectCodes;
    return this;
  }

  public ClassificationContractV3 addReplacingObjectCodesItem(String replacingObjectCodesItem) {
    if (this.replacingObjectCodes == null) {
      this.replacingObjectCodes = new ArrayList<String>();
    }
    this.replacingObjectCodes.add(replacingObjectCodesItem);
    return this;
  }

   /**
   * List of codes of the replacing items
   * @return replacingObjectCodes
  **/
  @Schema(description = "List of codes of the replacing items")
  public List<String> getReplacingObjectCodes() {
    return replacingObjectCodes;
  }

  public void setReplacingObjectCodes(List<String> replacingObjectCodes) {
    this.replacingObjectCodes = replacingObjectCodes;
  }

  public ClassificationContractV3 revisionDateUtc(OffsetDateTime revisionDateUtc) {
    this.revisionDateUtc = revisionDateUtc;
    return this;
  }

   /**
   * Date of the revision
   * @return revisionDateUtc
  **/
  @Schema(description = "Date of the revision")
  public OffsetDateTime getRevisionDateUtc() {
    return revisionDateUtc;
  }

  public void setRevisionDateUtc(OffsetDateTime revisionDateUtc) {
    this.revisionDateUtc = revisionDateUtc;
  }

  public ClassificationContractV3 revisionNumber(Integer revisionNumber) {
    this.revisionNumber = revisionNumber;
    return this;
  }

   /**
   * Revision number
   * @return revisionNumber
  **/
  @Schema(description = "Revision number")
  public Integer getRevisionNumber() {
    return revisionNumber;
  }

  public void setRevisionNumber(Integer revisionNumber) {
    this.revisionNumber = revisionNumber;
  }

  public ClassificationContractV3 status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Status, can be: Preview, Active or Inactive
   * @return status
  **/
  @Schema(required = true, description = "Status, can be: Preview, Active or Inactive")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public ClassificationContractV3 subdivisionsOfUse(List<String> subdivisionsOfUse) {
    this.subdivisionsOfUse = subdivisionsOfUse;
    return this;
  }

  public ClassificationContractV3 addSubdivisionsOfUseItem(String subdivisionsOfUseItem) {
    if (this.subdivisionsOfUse == null) {
      this.subdivisionsOfUse = new ArrayList<String>();
    }
    this.subdivisionsOfUse.add(subdivisionsOfUseItem);
    return this;
  }

   /**
   * List of subdivisions (e.g. states) where used
   * @return subdivisionsOfUse
  **/
  @Schema(description = "List of subdivisions (e.g. states) where used")
  public List<String> getSubdivisionsOfUse() {
    return subdivisionsOfUse;
  }

  public void setSubdivisionsOfUse(List<String> subdivisionsOfUse) {
    this.subdivisionsOfUse = subdivisionsOfUse;
  }

  public ClassificationContractV3 uid(String uid) {
    this.uid = uid;
    return this;
  }

   /**
   * Alternative unique global identification
   * @return uid
  **/
  @Schema(description = "Alternative unique global identification")
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }

  public ClassificationContractV3 versionDateUtc(OffsetDateTime versionDateUtc) {
    this.versionDateUtc = versionDateUtc;
    return this;
  }

   /**
   * Date of the version
   * @return versionDateUtc
  **/
  @Schema(required = true, description = "Date of the version")
  public OffsetDateTime getVersionDateUtc() {
    return versionDateUtc;
  }

  public void setVersionDateUtc(OffsetDateTime versionDateUtc) {
    this.versionDateUtc = versionDateUtc;
  }

  public ClassificationContractV3 versionNumber(Integer versionNumber) {
    this.versionNumber = versionNumber;
    return this;
  }

   /**
   * Version number
   * @return versionNumber
  **/
  @Schema(description = "Version number")
  public Integer getVersionNumber() {
    return versionNumber;
  }

  public void setVersionNumber(Integer versionNumber) {
    this.versionNumber = versionNumber;
  }

  public ClassificationContractV3 visualRepresentationUri(String visualRepresentationUri) {
    this.visualRepresentationUri = visualRepresentationUri;
    return this;
  }

   /**
   * URI of a visual representation
   * @return visualRepresentationUri
  **/
  @Schema(description = "URI of a visual representation")
  public String getVisualRepresentationUri() {
    return visualRepresentationUri;
  }

  public void setVisualRepresentationUri(String visualRepresentationUri) {
    this.visualRepresentationUri = visualRepresentationUri;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClassificationContractV3 classificationContractV3 = (ClassificationContractV3) o;
    return Objects.equals(this.synonyms, classificationContractV3.synonyms) &&
        Objects.equals(this.relatedIfcEntityNames, classificationContractV3.relatedIfcEntityNames) &&
        Objects.equals(this.parentClassificationReference, classificationContractV3.parentClassificationReference) &&
        Objects.equals(this.classificationProperties, classificationContractV3.classificationProperties) &&
        Objects.equals(this.classificationRelations, classificationContractV3.classificationRelations) &&
        Objects.equals(this.childClassificationReferences, classificationContractV3.childClassificationReferences) &&
        Objects.equals(this.activationDateUtc, classificationContractV3.activationDateUtc) &&
        Objects.equals(this.code, classificationContractV3.code) &&
        Objects.equals(this.creatorLanguageCode, classificationContractV3.creatorLanguageCode) &&
        Objects.equals(this.countriesOfUse, classificationContractV3.countriesOfUse) &&
        Objects.equals(this.countryOfOrigin, classificationContractV3.countryOfOrigin) &&
        Objects.equals(this.deActivationDateUtc, classificationContractV3.deActivationDateUtc) &&
        Objects.equals(this.definition, classificationContractV3.definition) &&
        Objects.equals(this.deprecationExplanation, classificationContractV3.deprecationExplanation) &&
        Objects.equals(this.documentReference, classificationContractV3.documentReference) &&
        Objects.equals(this.name, classificationContractV3.name) &&
        Objects.equals(this.namespaceUri, classificationContractV3.namespaceUri) &&
        Objects.equals(this.replacedObjectCodes, classificationContractV3.replacedObjectCodes) &&
        Objects.equals(this.replacingObjectCodes, classificationContractV3.replacingObjectCodes) &&
        Objects.equals(this.revisionDateUtc, classificationContractV3.revisionDateUtc) &&
        Objects.equals(this.revisionNumber, classificationContractV3.revisionNumber) &&
        Objects.equals(this.status, classificationContractV3.status) &&
        Objects.equals(this.subdivisionsOfUse, classificationContractV3.subdivisionsOfUse) &&
        Objects.equals(this.uid, classificationContractV3.uid) &&
        Objects.equals(this.versionDateUtc, classificationContractV3.versionDateUtc) &&
        Objects.equals(this.versionNumber, classificationContractV3.versionNumber) &&
        Objects.equals(this.visualRepresentationUri, classificationContractV3.visualRepresentationUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(synonyms, relatedIfcEntityNames, parentClassificationReference, classificationProperties, classificationRelations, childClassificationReferences, activationDateUtc, code, creatorLanguageCode, countriesOfUse, countryOfOrigin, deActivationDateUtc, definition, deprecationExplanation, documentReference, name, namespaceUri, replacedObjectCodes, replacingObjectCodes, revisionDateUtc, revisionNumber, status, subdivisionsOfUse, uid, versionDateUtc, versionNumber, visualRepresentationUri);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClassificationContractV3 {\n");
    
    sb.append("    synonyms: ").append(toIndentedString(synonyms)).append("\n");
    sb.append("    relatedIfcEntityNames: ").append(toIndentedString(relatedIfcEntityNames)).append("\n");
    sb.append("    parentClassificationReference: ").append(toIndentedString(parentClassificationReference)).append("\n");
    sb.append("    classificationProperties: ").append(toIndentedString(classificationProperties)).append("\n");
    sb.append("    classificationRelations: ").append(toIndentedString(classificationRelations)).append("\n");
    sb.append("    childClassificationReferences: ").append(toIndentedString(childClassificationReferences)).append("\n");
    sb.append("    activationDateUtc: ").append(toIndentedString(activationDateUtc)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    creatorLanguageCode: ").append(toIndentedString(creatorLanguageCode)).append("\n");
    sb.append("    countriesOfUse: ").append(toIndentedString(countriesOfUse)).append("\n");
    sb.append("    countryOfOrigin: ").append(toIndentedString(countryOfOrigin)).append("\n");
    sb.append("    deActivationDateUtc: ").append(toIndentedString(deActivationDateUtc)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    deprecationExplanation: ").append(toIndentedString(deprecationExplanation)).append("\n");
    sb.append("    documentReference: ").append(toIndentedString(documentReference)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespaceUri: ").append(toIndentedString(namespaceUri)).append("\n");
    sb.append("    replacedObjectCodes: ").append(toIndentedString(replacedObjectCodes)).append("\n");
    sb.append("    replacingObjectCodes: ").append(toIndentedString(replacingObjectCodes)).append("\n");
    sb.append("    revisionDateUtc: ").append(toIndentedString(revisionDateUtc)).append("\n");
    sb.append("    revisionNumber: ").append(toIndentedString(revisionNumber)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subdivisionsOfUse: ").append(toIndentedString(subdivisionsOfUse)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    versionDateUtc: ").append(toIndentedString(versionDateUtc)).append("\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("    visualRepresentationUri: ").append(toIndentedString(visualRepresentationUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
