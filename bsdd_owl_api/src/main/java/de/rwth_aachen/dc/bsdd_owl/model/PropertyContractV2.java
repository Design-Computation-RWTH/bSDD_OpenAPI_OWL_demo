/*
 * bSDD API prototype
 * API to access the buildingSMART Data Dictionary
 *
 * OpenAPI spec version: v1
 * Contact: bsdd_support@buildingsmart.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.rwth_aachen.dc.bsdd_owl.model;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * PropertyContractV2
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-09-21T11:35:32.475Z[GMT]")
public class PropertyContractV2 {
  @SerializedName("description")
  private String description = null;

  @SerializedName("connectedPropertyCodes")
  private List<String> connectedPropertyCodes = null;

  @SerializedName("dataType")
  private String dataType = null;

  @SerializedName("dimension")
  private String dimension = null;

  @SerializedName("dimensionLength")
  private Integer dimensionLength = null;

  @SerializedName("dimensionMass")
  private Integer dimensionMass = null;

  @SerializedName("dimensionTime")
  private Integer dimensionTime = null;

  @SerializedName("dimensionElectricCurrent")
  private Integer dimensionElectricCurrent = null;

  @SerializedName("dimensionThermodynamicTemperature")
  private Integer dimensionThermodynamicTemperature = null;

  @SerializedName("dimensionAmountOfSubstance")
  private Integer dimensionAmountOfSubstance = null;

  @SerializedName("dimensionLuminousIntensity")
  private Integer dimensionLuminousIntensity = null;

  @SerializedName("dynamicParameterPropertyCodes")
  private List<String> dynamicParameterPropertyCodes = null;

  @SerializedName("example")
  private String example = null;

  @SerializedName("isDynamic")
  private Boolean isDynamic = null;

  @SerializedName("maxExclusive")
  private Double maxExclusive = null;

  @SerializedName("maxInclusive")
  private Double maxInclusive = null;

  @SerializedName("methodOfMeasurement")
  private String methodOfMeasurement = null;

  @SerializedName("minExclusive")
  private Double minExclusive = null;

  @SerializedName("minInclusive")
  private Double minInclusive = null;

  @SerializedName("pattern")
  private String pattern = null;

  @SerializedName("physicalQuantity")
  private String physicalQuantity = null;

  @SerializedName("possibleValues")
  private List<PropertyValueContractV2> possibleValues = null;

  @SerializedName("propertyValueKind")
  private String propertyValueKind = null;

  @SerializedName("propertyRelations")
  private List<PropertyRelationContractV2> propertyRelations = null;

  @SerializedName("textFormat")
  private String textFormat = null;

  @SerializedName("units")
  private List<String> units = null;

  @SerializedName("activationDateUtc")
  private OffsetDateTime activationDateUtc = null;

  @SerializedName("code")
  private String code = null;

  @SerializedName("creatorLanguageCode")
  private String creatorLanguageCode = null;

  @SerializedName("countriesOfUse")
  private List<String> countriesOfUse = null;

  @SerializedName("countryOfOrigin")
  private String countryOfOrigin = null;

  @SerializedName("deActivationDateUtc")
  private OffsetDateTime deActivationDateUtc = null;

  @SerializedName("definition")
  private String definition = null;

  @SerializedName("deprecationExplanation")
  private String deprecationExplanation = null;

  @SerializedName("documentReference")
  private String documentReference = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("namespaceUri")
  private String namespaceUri = null;

  @SerializedName("replacedObjectCodes")
  private List<String> replacedObjectCodes = null;

  @SerializedName("replacingObjectCodes")
  private List<String> replacingObjectCodes = null;

  @SerializedName("revisionDateUtc")
  private OffsetDateTime revisionDateUtc = null;

  @SerializedName("revisionNumber")
  private Integer revisionNumber = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("subdivisionsOfUse")
  private List<String> subdivisionsOfUse = null;

  @SerializedName("uid")
  private String uid = null;

  @SerializedName("versionDateUtc")
  private OffsetDateTime versionDateUtc = null;

  @SerializedName("versionNumber")
  private Integer versionNumber = null;

  @SerializedName("visualRepresentationUri")
  private String visualRepresentationUri = null;

  public PropertyContractV2 description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Plain language description of the property.
   * @return description
  **/
  @Schema(description = "Plain language description of the property.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public PropertyContractV2 connectedPropertyCodes(List<String> connectedPropertyCodes) {
    this.connectedPropertyCodes = connectedPropertyCodes;
    return this;
  }

  public PropertyContractV2 addConnectedPropertyCodesItem(String connectedPropertyCodesItem) {
    if (this.connectedPropertyCodes == null) {
      this.connectedPropertyCodes = new ArrayList<String>();
    }
    this.connectedPropertyCodes.add(connectedPropertyCodesItem);
    return this;
  }

   /**
   * List of connected property codes
   * @return connectedPropertyCodes
  **/
  @Schema(description = "List of connected property codes")
  public List<String> getConnectedPropertyCodes() {
    return connectedPropertyCodes;
  }

  public void setConnectedPropertyCodes(List<String> connectedPropertyCodes) {
    this.connectedPropertyCodes = connectedPropertyCodes;
  }

  public PropertyContractV2 dataType(String dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   * Format for expressing the value of the property: Boolean, Character, Date, Enumeration, Integer, Real, String, Time
   * @return dataType
  **/
  @Schema(description = "Format for expressing the value of the property: Boolean, Character, Date, Enumeration, Integer, Real, String, Time")
  public String getDataType() {
    return dataType;
  }

  public void setDataType(String dataType) {
    this.dataType = dataType;
  }

  public PropertyContractV2 dimension(String dimension) {
    this.dimension = dimension;
    return this;
  }

   /**
   * Dimension of the physical quantity in format \&quot;L M T I Θ N J\&quot;, for example \&quot;-2 1 0 0 0 0 0\&quot;.  With    L   Length    M   Mass    T   Time    I   Electric current    Θ   Thermodynamic Temperature    N   Amount of substance    J   Luminous intensity
   * @return dimension
  **/
  @Schema(description = "Dimension of the physical quantity in format \"L M T I Θ N J\", for example \"-2 1 0 0 0 0 0\".  With    L   Length    M   Mass    T   Time    I   Electric current    Θ   Thermodynamic Temperature    N   Amount of substance    J   Luminous intensity")
  public String getDimension() {
    return dimension;
  }

  public void setDimension(String dimension) {
    this.dimension = dimension;
  }

  public PropertyContractV2 dimensionLength(Integer dimensionLength) {
    this.dimensionLength = dimensionLength;
    return this;
  }

   /**
   * The Length value of the dimension
   * @return dimensionLength
  **/
  @Schema(description = "The Length value of the dimension")
  public Integer getDimensionLength() {
    return dimensionLength;
  }

  public void setDimensionLength(Integer dimensionLength) {
    this.dimensionLength = dimensionLength;
  }

  public PropertyContractV2 dimensionMass(Integer dimensionMass) {
    this.dimensionMass = dimensionMass;
    return this;
  }

   /**
   * The Mass value of the dimension
   * @return dimensionMass
  **/
  @Schema(description = "The Mass value of the dimension")
  public Integer getDimensionMass() {
    return dimensionMass;
  }

  public void setDimensionMass(Integer dimensionMass) {
    this.dimensionMass = dimensionMass;
  }

  public PropertyContractV2 dimensionTime(Integer dimensionTime) {
    this.dimensionTime = dimensionTime;
    return this;
  }

   /**
   * The Time value of the dimension
   * @return dimensionTime
  **/
  @Schema(description = "The Time value of the dimension")
  public Integer getDimensionTime() {
    return dimensionTime;
  }

  public void setDimensionTime(Integer dimensionTime) {
    this.dimensionTime = dimensionTime;
  }

  public PropertyContractV2 dimensionElectricCurrent(Integer dimensionElectricCurrent) {
    this.dimensionElectricCurrent = dimensionElectricCurrent;
    return this;
  }

   /**
   * The Electric current value of the dimension
   * @return dimensionElectricCurrent
  **/
  @Schema(description = "The Electric current value of the dimension")
  public Integer getDimensionElectricCurrent() {
    return dimensionElectricCurrent;
  }

  public void setDimensionElectricCurrent(Integer dimensionElectricCurrent) {
    this.dimensionElectricCurrent = dimensionElectricCurrent;
  }

  public PropertyContractV2 dimensionThermodynamicTemperature(Integer dimensionThermodynamicTemperature) {
    this.dimensionThermodynamicTemperature = dimensionThermodynamicTemperature;
    return this;
  }

   /**
   * The Thermodynamic temperature value of the dimension
   * @return dimensionThermodynamicTemperature
  **/
  @Schema(description = "The Thermodynamic temperature value of the dimension")
  public Integer getDimensionThermodynamicTemperature() {
    return dimensionThermodynamicTemperature;
  }

  public void setDimensionThermodynamicTemperature(Integer dimensionThermodynamicTemperature) {
    this.dimensionThermodynamicTemperature = dimensionThermodynamicTemperature;
  }

  public PropertyContractV2 dimensionAmountOfSubstance(Integer dimensionAmountOfSubstance) {
    this.dimensionAmountOfSubstance = dimensionAmountOfSubstance;
    return this;
  }

   /**
   * The Amount of substance value of the dimension
   * @return dimensionAmountOfSubstance
  **/
  @Schema(description = "The Amount of substance value of the dimension")
  public Integer getDimensionAmountOfSubstance() {
    return dimensionAmountOfSubstance;
  }

  public void setDimensionAmountOfSubstance(Integer dimensionAmountOfSubstance) {
    this.dimensionAmountOfSubstance = dimensionAmountOfSubstance;
  }

  public PropertyContractV2 dimensionLuminousIntensity(Integer dimensionLuminousIntensity) {
    this.dimensionLuminousIntensity = dimensionLuminousIntensity;
    return this;
  }

   /**
   * The Luminous intensity value of the dimension
   * @return dimensionLuminousIntensity
  **/
  @Schema(description = "The Luminous intensity value of the dimension")
  public Integer getDimensionLuminousIntensity() {
    return dimensionLuminousIntensity;
  }

  public void setDimensionLuminousIntensity(Integer dimensionLuminousIntensity) {
    this.dimensionLuminousIntensity = dimensionLuminousIntensity;
  }

  public PropertyContractV2 dynamicParameterPropertyCodes(List<String> dynamicParameterPropertyCodes) {
    this.dynamicParameterPropertyCodes = dynamicParameterPropertyCodes;
    return this;
  }

  public PropertyContractV2 addDynamicParameterPropertyCodesItem(String dynamicParameterPropertyCodesItem) {
    if (this.dynamicParameterPropertyCodes == null) {
      this.dynamicParameterPropertyCodes = new ArrayList<String>();
    }
    this.dynamicParameterPropertyCodes.add(dynamicParameterPropertyCodesItem);
    return this;
  }

   /**
   * List of codes of the properties which are parameters of the function for a dynamic property.  Only applicable for dynamic properties (IsDynamic)
   * @return dynamicParameterPropertyCodes
  **/
  @Schema(description = "List of codes of the properties which are parameters of the function for a dynamic property.  Only applicable for dynamic properties (IsDynamic)")
  public List<String> getDynamicParameterPropertyCodes() {
    return dynamicParameterPropertyCodes;
  }

  public void setDynamicParameterPropertyCodes(List<String> dynamicParameterPropertyCodes) {
    this.dynamicParameterPropertyCodes = dynamicParameterPropertyCodes;
  }

  public PropertyContractV2 example(String example) {
    this.example = example;
    return this;
  }

   /**
   * Illustrate possible use or values of the Property
   * @return example
  **/
  @Schema(description = "Illustrate possible use or values of the Property")
  public String getExample() {
    return example;
  }

  public void setExample(String example) {
    this.example = example;
  }

  public PropertyContractV2 isDynamic(Boolean isDynamic) {
    this.isDynamic = isDynamic;
    return this;
  }

   /**
   * True if the value of this property is dependent on other properties (as provided in DynamicParameterPropertyCodes)
   * @return isDynamic
  **/
  @Schema(description = "True if the value of this property is dependent on other properties (as provided in DynamicParameterPropertyCodes)")
  public Boolean isIsDynamic() {
    return isDynamic;
  }

  public void setIsDynamic(Boolean isDynamic) {
    this.isDynamic = isDynamic;
  }

  public PropertyContractV2 maxExclusive(Double maxExclusive) {
    this.maxExclusive = maxExclusive;
    return this;
  }

   /**
   * Maximum value of the property, exclusive
   * @return maxExclusive
  **/
  @Schema(description = "Maximum value of the property, exclusive")
  public Double getMaxExclusive() {
    return maxExclusive;
  }

  public void setMaxExclusive(Double maxExclusive) {
    this.maxExclusive = maxExclusive;
  }

  public PropertyContractV2 maxInclusive(Double maxInclusive) {
    this.maxInclusive = maxInclusive;
    return this;
  }

   /**
   * Maximum value of the property, inclusive
   * @return maxInclusive
  **/
  @Schema(description = "Maximum value of the property, inclusive")
  public Double getMaxInclusive() {
    return maxInclusive;
  }

  public void setMaxInclusive(Double maxInclusive) {
    this.maxInclusive = maxInclusive;
  }

  public PropertyContractV2 methodOfMeasurement(String methodOfMeasurement) {
    this.methodOfMeasurement = methodOfMeasurement;
    return this;
  }

   /**
   * Description of the method of measurement
   * @return methodOfMeasurement
  **/
  @Schema(description = "Description of the method of measurement")
  public String getMethodOfMeasurement() {
    return methodOfMeasurement;
  }

  public void setMethodOfMeasurement(String methodOfMeasurement) {
    this.methodOfMeasurement = methodOfMeasurement;
  }

  public PropertyContractV2 minExclusive(Double minExclusive) {
    this.minExclusive = minExclusive;
    return this;
  }

   /**
   * Minimum value of the property, exclusive
   * @return minExclusive
  **/
  @Schema(description = "Minimum value of the property, exclusive")
  public Double getMinExclusive() {
    return minExclusive;
  }

  public void setMinExclusive(Double minExclusive) {
    this.minExclusive = minExclusive;
  }

  public PropertyContractV2 minInclusive(Double minInclusive) {
    this.minInclusive = minInclusive;
    return this;
  }

   /**
   * Minimum value of the property, inclusive
   * @return minInclusive
  **/
  @Schema(description = "Minimum value of the property, inclusive")
  public Double getMinInclusive() {
    return minInclusive;
  }

  public void setMinInclusive(Double minInclusive) {
    this.minInclusive = minInclusive;
  }

  public PropertyContractV2 pattern(String pattern) {
    this.pattern = pattern;
    return this;
  }

   /**
   * An XML Schema Regular expression for the property value.  See for explanation: https://www.regular-expressions.info/xml.html.
   * @return pattern
  **/
  @Schema(description = "An XML Schema Regular expression for the property value.  See for explanation: https://www.regular-expressions.info/xml.html.")
  public String getPattern() {
    return pattern;
  }

  public void setPattern(String pattern) {
    this.pattern = pattern;
  }

  public PropertyContractV2 physicalQuantity(String physicalQuantity) {
    this.physicalQuantity = physicalQuantity;
    return this;
  }

   /**
   * The quantity in plain text
   * @return physicalQuantity
  **/
  @Schema(description = "The quantity in plain text")
  public String getPhysicalQuantity() {
    return physicalQuantity;
  }

  public void setPhysicalQuantity(String physicalQuantity) {
    this.physicalQuantity = physicalQuantity;
  }

  public PropertyContractV2 possibleValues(List<PropertyValueContractV2> possibleValues) {
    this.possibleValues = possibleValues;
    return this;
  }

  public PropertyContractV2 addPossibleValuesItem(PropertyValueContractV2 possibleValuesItem) {
    if (this.possibleValues == null) {
      this.possibleValues = new ArrayList<PropertyValueContractV2>();
    }
    this.possibleValues.add(possibleValuesItem);
    return this;
  }

   /**
   * List of possible values
   * @return possibleValues
  **/
  @Schema(description = "List of possible values")
  public List<PropertyValueContractV2> getPossibleValues() {
    return possibleValues;
  }

  public void setPossibleValues(List<PropertyValueContractV2> possibleValues) {
    this.possibleValues = possibleValues;
  }

  public PropertyContractV2 propertyValueKind(String propertyValueKind) {
    this.propertyValueKind = propertyValueKind;
    return this;
  }

   /**
   * Indicates kind of value: Single, Range (2 values expected), List (multiple values expected), Complex (use in combination with \&quot;ConnectedProperties\&quot;), ComplexList
   * @return propertyValueKind
  **/
  @Schema(description = "Indicates kind of value: Single, Range (2 values expected), List (multiple values expected), Complex (use in combination with \"ConnectedProperties\"), ComplexList")
  public String getPropertyValueKind() {
    return propertyValueKind;
  }

  public void setPropertyValueKind(String propertyValueKind) {
    this.propertyValueKind = propertyValueKind;
  }

  public PropertyContractV2 propertyRelations(List<PropertyRelationContractV2> propertyRelations) {
    this.propertyRelations = propertyRelations;
    return this;
  }

  public PropertyContractV2 addPropertyRelationsItem(PropertyRelationContractV2 propertyRelationsItem) {
    if (this.propertyRelations == null) {
      this.propertyRelations = new ArrayList<PropertyRelationContractV2>();
    }
    this.propertyRelations.add(propertyRelationsItem);
    return this;
  }

   /**
   * List of relations with other properties
   * @return propertyRelations
  **/
  @Schema(description = "List of relations with other properties")
  public List<PropertyRelationContractV2> getPropertyRelations() {
    return propertyRelations;
  }

  public void setPropertyRelations(List<PropertyRelationContractV2> propertyRelations) {
    this.propertyRelations = propertyRelations;
  }

  public PropertyContractV2 textFormat(String textFormat) {
    this.textFormat = textFormat;
    return this;
  }

   /**
   * The text type, e.g. UTF-8
   * @return textFormat
  **/
  @Schema(description = "The text type, e.g. UTF-8")
  public String getTextFormat() {
    return textFormat;
  }

  public void setTextFormat(String textFormat) {
    this.textFormat = textFormat;
  }

  public PropertyContractV2 units(List<String> units) {
    this.units = units;
    return this;
  }

  public PropertyContractV2 addUnitsItem(String unitsItem) {
    if (this.units == null) {
      this.units = new ArrayList<String>();
    }
    this.units.add(unitsItem);
    return this;
  }

   /**
   * Multiple references to Unit
   * @return units
  **/
  @Schema(description = "Multiple references to Unit")
  public List<String> getUnits() {
    return units;
  }

  public void setUnits(List<String> units) {
    this.units = units;
  }

  public PropertyContractV2 activationDateUtc(OffsetDateTime activationDateUtc) {
    this.activationDateUtc = activationDateUtc;
    return this;
  }

   /**
   * Date of activation
   * @return activationDateUtc
  **/
  @Schema(required = true, description = "Date of activation")
  public OffsetDateTime getActivationDateUtc() {
    return activationDateUtc;
  }

  public void setActivationDateUtc(OffsetDateTime activationDateUtc) {
    this.activationDateUtc = activationDateUtc;
  }

  public PropertyContractV2 code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Code used originally by the domain
   * @return code
  **/
  @Schema(required = true, description = "Code used originally by the domain")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public PropertyContractV2 creatorLanguageCode(String creatorLanguageCode) {
    this.creatorLanguageCode = creatorLanguageCode;
    return this;
  }

   /**
   * Language code of the creator
   * @return creatorLanguageCode
  **/
  @Schema(description = "Language code of the creator")
  public String getCreatorLanguageCode() {
    return creatorLanguageCode;
  }

  public void setCreatorLanguageCode(String creatorLanguageCode) {
    this.creatorLanguageCode = creatorLanguageCode;
  }

  public PropertyContractV2 countriesOfUse(List<String> countriesOfUse) {
    this.countriesOfUse = countriesOfUse;
    return this;
  }

  public PropertyContractV2 addCountriesOfUseItem(String countriesOfUseItem) {
    if (this.countriesOfUse == null) {
      this.countriesOfUse = new ArrayList<String>();
    }
    this.countriesOfUse.add(countriesOfUseItem);
    return this;
  }

   /**
   * List of countries where used
   * @return countriesOfUse
  **/
  @Schema(description = "List of countries where used")
  public List<String> getCountriesOfUse() {
    return countriesOfUse;
  }

  public void setCountriesOfUse(List<String> countriesOfUse) {
    this.countriesOfUse = countriesOfUse;
  }

  public PropertyContractV2 countryOfOrigin(String countryOfOrigin) {
    this.countryOfOrigin = countryOfOrigin;
    return this;
  }

   /**
   * Country of origin
   * @return countryOfOrigin
  **/
  @Schema(description = "Country of origin")
  public String getCountryOfOrigin() {
    return countryOfOrigin;
  }

  public void setCountryOfOrigin(String countryOfOrigin) {
    this.countryOfOrigin = countryOfOrigin;
  }

  public PropertyContractV2 deActivationDateUtc(OffsetDateTime deActivationDateUtc) {
    this.deActivationDateUtc = deActivationDateUtc;
    return this;
  }

   /**
   * Date of deactivation
   * @return deActivationDateUtc
  **/
  @Schema(description = "Date of deactivation")
  public OffsetDateTime getDeActivationDateUtc() {
    return deActivationDateUtc;
  }

  public void setDeActivationDateUtc(OffsetDateTime deActivationDateUtc) {
    this.deActivationDateUtc = deActivationDateUtc;
  }

  public PropertyContractV2 definition(String definition) {
    this.definition = definition;
    return this;
  }

   /**
   * Definition
   * @return definition
  **/
  @Schema(description = "Definition")
  public String getDefinition() {
    return definition;
  }

  public void setDefinition(String definition) {
    this.definition = definition;
  }

  public PropertyContractV2 deprecationExplanation(String deprecationExplanation) {
    this.deprecationExplanation = deprecationExplanation;
    return this;
  }

   /**
   * Explanation of the deprecation
   * @return deprecationExplanation
  **/
  @Schema(description = "Explanation of the deprecation")
  public String getDeprecationExplanation() {
    return deprecationExplanation;
  }

  public void setDeprecationExplanation(String deprecationExplanation) {
    this.deprecationExplanation = deprecationExplanation;
  }

  public PropertyContractV2 documentReference(String documentReference) {
    this.documentReference = documentReference;
    return this;
  }

   /**
   * Reference to a(n official) document
   * @return documentReference
  **/
  @Schema(description = "Reference to a(n official) document")
  public String getDocumentReference() {
    return documentReference;
  }

  public void setDocumentReference(String documentReference) {
    this.documentReference = documentReference;
  }

  public PropertyContractV2 name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name
   * @return name
  **/
  @Schema(required = true, description = "Name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PropertyContractV2 namespaceUri(String namespaceUri) {
    this.namespaceUri = namespaceUri;
    return this;
  }

   /**
   * Unique identification
   * @return namespaceUri
  **/
  @Schema(required = true, description = "Unique identification")
  public String getNamespaceUri() {
    return namespaceUri;
  }

  public void setNamespaceUri(String namespaceUri) {
    this.namespaceUri = namespaceUri;
  }

  public PropertyContractV2 replacedObjectCodes(List<String> replacedObjectCodes) {
    this.replacedObjectCodes = replacedObjectCodes;
    return this;
  }

  public PropertyContractV2 addReplacedObjectCodesItem(String replacedObjectCodesItem) {
    if (this.replacedObjectCodes == null) {
      this.replacedObjectCodes = new ArrayList<String>();
    }
    this.replacedObjectCodes.add(replacedObjectCodesItem);
    return this;
  }

   /**
   * List of codes of the replaced items
   * @return replacedObjectCodes
  **/
  @Schema(description = "List of codes of the replaced items")
  public List<String> getReplacedObjectCodes() {
    return replacedObjectCodes;
  }

  public void setReplacedObjectCodes(List<String> replacedObjectCodes) {
    this.replacedObjectCodes = replacedObjectCodes;
  }

  public PropertyContractV2 replacingObjectCodes(List<String> replacingObjectCodes) {
    this.replacingObjectCodes = replacingObjectCodes;
    return this;
  }

  public PropertyContractV2 addReplacingObjectCodesItem(String replacingObjectCodesItem) {
    if (this.replacingObjectCodes == null) {
      this.replacingObjectCodes = new ArrayList<String>();
    }
    this.replacingObjectCodes.add(replacingObjectCodesItem);
    return this;
  }

   /**
   * List of codes of the replacing items
   * @return replacingObjectCodes
  **/
  @Schema(description = "List of codes of the replacing items")
  public List<String> getReplacingObjectCodes() {
    return replacingObjectCodes;
  }

  public void setReplacingObjectCodes(List<String> replacingObjectCodes) {
    this.replacingObjectCodes = replacingObjectCodes;
  }

  public PropertyContractV2 revisionDateUtc(OffsetDateTime revisionDateUtc) {
    this.revisionDateUtc = revisionDateUtc;
    return this;
  }

   /**
   * Date of the revision
   * @return revisionDateUtc
  **/
  @Schema(description = "Date of the revision")
  public OffsetDateTime getRevisionDateUtc() {
    return revisionDateUtc;
  }

  public void setRevisionDateUtc(OffsetDateTime revisionDateUtc) {
    this.revisionDateUtc = revisionDateUtc;
  }

  public PropertyContractV2 revisionNumber(Integer revisionNumber) {
    this.revisionNumber = revisionNumber;
    return this;
  }

   /**
   * Revision number
   * @return revisionNumber
  **/
  @Schema(description = "Revision number")
  public Integer getRevisionNumber() {
    return revisionNumber;
  }

  public void setRevisionNumber(Integer revisionNumber) {
    this.revisionNumber = revisionNumber;
  }

  public PropertyContractV2 status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Status, can be: Preview, Active or Inactive
   * @return status
  **/
  @Schema(required = true, description = "Status, can be: Preview, Active or Inactive")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public PropertyContractV2 subdivisionsOfUse(List<String> subdivisionsOfUse) {
    this.subdivisionsOfUse = subdivisionsOfUse;
    return this;
  }

  public PropertyContractV2 addSubdivisionsOfUseItem(String subdivisionsOfUseItem) {
    if (this.subdivisionsOfUse == null) {
      this.subdivisionsOfUse = new ArrayList<String>();
    }
    this.subdivisionsOfUse.add(subdivisionsOfUseItem);
    return this;
  }

   /**
   * List of subdivisions (e.g. states) where used
   * @return subdivisionsOfUse
  **/
  @Schema(description = "List of subdivisions (e.g. states) where used")
  public List<String> getSubdivisionsOfUse() {
    return subdivisionsOfUse;
  }

  public void setSubdivisionsOfUse(List<String> subdivisionsOfUse) {
    this.subdivisionsOfUse = subdivisionsOfUse;
  }

  public PropertyContractV2 uid(String uid) {
    this.uid = uid;
    return this;
  }

   /**
   * Alternative unique global identification
   * @return uid
  **/
  @Schema(description = "Alternative unique global identification")
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }

  public PropertyContractV2 versionDateUtc(OffsetDateTime versionDateUtc) {
    this.versionDateUtc = versionDateUtc;
    return this;
  }

   /**
   * Date of the version
   * @return versionDateUtc
  **/
  @Schema(required = true, description = "Date of the version")
  public OffsetDateTime getVersionDateUtc() {
    return versionDateUtc;
  }

  public void setVersionDateUtc(OffsetDateTime versionDateUtc) {
    this.versionDateUtc = versionDateUtc;
  }

  public PropertyContractV2 versionNumber(Integer versionNumber) {
    this.versionNumber = versionNumber;
    return this;
  }

   /**
   * Version number
   * @return versionNumber
  **/
  @Schema(description = "Version number")
  public Integer getVersionNumber() {
    return versionNumber;
  }

  public void setVersionNumber(Integer versionNumber) {
    this.versionNumber = versionNumber;
  }

  public PropertyContractV2 visualRepresentationUri(String visualRepresentationUri) {
    this.visualRepresentationUri = visualRepresentationUri;
    return this;
  }

   /**
   * URI of a visual representation
   * @return visualRepresentationUri
  **/
  @Schema(description = "URI of a visual representation")
  public String getVisualRepresentationUri() {
    return visualRepresentationUri;
  }

  public void setVisualRepresentationUri(String visualRepresentationUri) {
    this.visualRepresentationUri = visualRepresentationUri;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyContractV2 propertyContractV2 = (PropertyContractV2) o;
    return Objects.equals(this.description, propertyContractV2.description) &&
        Objects.equals(this.connectedPropertyCodes, propertyContractV2.connectedPropertyCodes) &&
        Objects.equals(this.dataType, propertyContractV2.dataType) &&
        Objects.equals(this.dimension, propertyContractV2.dimension) &&
        Objects.equals(this.dimensionLength, propertyContractV2.dimensionLength) &&
        Objects.equals(this.dimensionMass, propertyContractV2.dimensionMass) &&
        Objects.equals(this.dimensionTime, propertyContractV2.dimensionTime) &&
        Objects.equals(this.dimensionElectricCurrent, propertyContractV2.dimensionElectricCurrent) &&
        Objects.equals(this.dimensionThermodynamicTemperature, propertyContractV2.dimensionThermodynamicTemperature) &&
        Objects.equals(this.dimensionAmountOfSubstance, propertyContractV2.dimensionAmountOfSubstance) &&
        Objects.equals(this.dimensionLuminousIntensity, propertyContractV2.dimensionLuminousIntensity) &&
        Objects.equals(this.dynamicParameterPropertyCodes, propertyContractV2.dynamicParameterPropertyCodes) &&
        Objects.equals(this.example, propertyContractV2.example) &&
        Objects.equals(this.isDynamic, propertyContractV2.isDynamic) &&
        Objects.equals(this.maxExclusive, propertyContractV2.maxExclusive) &&
        Objects.equals(this.maxInclusive, propertyContractV2.maxInclusive) &&
        Objects.equals(this.methodOfMeasurement, propertyContractV2.methodOfMeasurement) &&
        Objects.equals(this.minExclusive, propertyContractV2.minExclusive) &&
        Objects.equals(this.minInclusive, propertyContractV2.minInclusive) &&
        Objects.equals(this.pattern, propertyContractV2.pattern) &&
        Objects.equals(this.physicalQuantity, propertyContractV2.physicalQuantity) &&
        Objects.equals(this.possibleValues, propertyContractV2.possibleValues) &&
        Objects.equals(this.propertyValueKind, propertyContractV2.propertyValueKind) &&
        Objects.equals(this.propertyRelations, propertyContractV2.propertyRelations) &&
        Objects.equals(this.textFormat, propertyContractV2.textFormat) &&
        Objects.equals(this.units, propertyContractV2.units) &&
        Objects.equals(this.activationDateUtc, propertyContractV2.activationDateUtc) &&
        Objects.equals(this.code, propertyContractV2.code) &&
        Objects.equals(this.creatorLanguageCode, propertyContractV2.creatorLanguageCode) &&
        Objects.equals(this.countriesOfUse, propertyContractV2.countriesOfUse) &&
        Objects.equals(this.countryOfOrigin, propertyContractV2.countryOfOrigin) &&
        Objects.equals(this.deActivationDateUtc, propertyContractV2.deActivationDateUtc) &&
        Objects.equals(this.definition, propertyContractV2.definition) &&
        Objects.equals(this.deprecationExplanation, propertyContractV2.deprecationExplanation) &&
        Objects.equals(this.documentReference, propertyContractV2.documentReference) &&
        Objects.equals(this.name, propertyContractV2.name) &&
        Objects.equals(this.namespaceUri, propertyContractV2.namespaceUri) &&
        Objects.equals(this.replacedObjectCodes, propertyContractV2.replacedObjectCodes) &&
        Objects.equals(this.replacingObjectCodes, propertyContractV2.replacingObjectCodes) &&
        Objects.equals(this.revisionDateUtc, propertyContractV2.revisionDateUtc) &&
        Objects.equals(this.revisionNumber, propertyContractV2.revisionNumber) &&
        Objects.equals(this.status, propertyContractV2.status) &&
        Objects.equals(this.subdivisionsOfUse, propertyContractV2.subdivisionsOfUse) &&
        Objects.equals(this.uid, propertyContractV2.uid) &&
        Objects.equals(this.versionDateUtc, propertyContractV2.versionDateUtc) &&
        Objects.equals(this.versionNumber, propertyContractV2.versionNumber) &&
        Objects.equals(this.visualRepresentationUri, propertyContractV2.visualRepresentationUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, connectedPropertyCodes, dataType, dimension, dimensionLength, dimensionMass, dimensionTime, dimensionElectricCurrent, dimensionThermodynamicTemperature, dimensionAmountOfSubstance, dimensionLuminousIntensity, dynamicParameterPropertyCodes, example, isDynamic, maxExclusive, maxInclusive, methodOfMeasurement, minExclusive, minInclusive, pattern, physicalQuantity, possibleValues, propertyValueKind, propertyRelations, textFormat, units, activationDateUtc, code, creatorLanguageCode, countriesOfUse, countryOfOrigin, deActivationDateUtc, definition, deprecationExplanation, documentReference, name, namespaceUri, replacedObjectCodes, replacingObjectCodes, revisionDateUtc, revisionNumber, status, subdivisionsOfUse, uid, versionDateUtc, versionNumber, visualRepresentationUri);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyContractV2 {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    connectedPropertyCodes: ").append(toIndentedString(connectedPropertyCodes)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    dimensionLength: ").append(toIndentedString(dimensionLength)).append("\n");
    sb.append("    dimensionMass: ").append(toIndentedString(dimensionMass)).append("\n");
    sb.append("    dimensionTime: ").append(toIndentedString(dimensionTime)).append("\n");
    sb.append("    dimensionElectricCurrent: ").append(toIndentedString(dimensionElectricCurrent)).append("\n");
    sb.append("    dimensionThermodynamicTemperature: ").append(toIndentedString(dimensionThermodynamicTemperature)).append("\n");
    sb.append("    dimensionAmountOfSubstance: ").append(toIndentedString(dimensionAmountOfSubstance)).append("\n");
    sb.append("    dimensionLuminousIntensity: ").append(toIndentedString(dimensionLuminousIntensity)).append("\n");
    sb.append("    dynamicParameterPropertyCodes: ").append(toIndentedString(dynamicParameterPropertyCodes)).append("\n");
    sb.append("    example: ").append(toIndentedString(example)).append("\n");
    sb.append("    isDynamic: ").append(toIndentedString(isDynamic)).append("\n");
    sb.append("    maxExclusive: ").append(toIndentedString(maxExclusive)).append("\n");
    sb.append("    maxInclusive: ").append(toIndentedString(maxInclusive)).append("\n");
    sb.append("    methodOfMeasurement: ").append(toIndentedString(methodOfMeasurement)).append("\n");
    sb.append("    minExclusive: ").append(toIndentedString(minExclusive)).append("\n");
    sb.append("    minInclusive: ").append(toIndentedString(minInclusive)).append("\n");
    sb.append("    pattern: ").append(toIndentedString(pattern)).append("\n");
    sb.append("    physicalQuantity: ").append(toIndentedString(physicalQuantity)).append("\n");
    sb.append("    possibleValues: ").append(toIndentedString(possibleValues)).append("\n");
    sb.append("    propertyValueKind: ").append(toIndentedString(propertyValueKind)).append("\n");
    sb.append("    propertyRelations: ").append(toIndentedString(propertyRelations)).append("\n");
    sb.append("    textFormat: ").append(toIndentedString(textFormat)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    activationDateUtc: ").append(toIndentedString(activationDateUtc)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    creatorLanguageCode: ").append(toIndentedString(creatorLanguageCode)).append("\n");
    sb.append("    countriesOfUse: ").append(toIndentedString(countriesOfUse)).append("\n");
    sb.append("    countryOfOrigin: ").append(toIndentedString(countryOfOrigin)).append("\n");
    sb.append("    deActivationDateUtc: ").append(toIndentedString(deActivationDateUtc)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    deprecationExplanation: ").append(toIndentedString(deprecationExplanation)).append("\n");
    sb.append("    documentReference: ").append(toIndentedString(documentReference)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespaceUri: ").append(toIndentedString(namespaceUri)).append("\n");
    sb.append("    replacedObjectCodes: ").append(toIndentedString(replacedObjectCodes)).append("\n");
    sb.append("    replacingObjectCodes: ").append(toIndentedString(replacingObjectCodes)).append("\n");
    sb.append("    revisionDateUtc: ").append(toIndentedString(revisionDateUtc)).append("\n");
    sb.append("    revisionNumber: ").append(toIndentedString(revisionNumber)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subdivisionsOfUse: ").append(toIndentedString(subdivisionsOfUse)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    versionDateUtc: ").append(toIndentedString(versionDateUtc)).append("\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("    visualRepresentationUri: ").append(toIndentedString(visualRepresentationUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
