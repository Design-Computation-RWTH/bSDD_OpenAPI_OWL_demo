/*
 * bSDD API prototype
 * API to access the buildingSMART Data Dictionary
 *
 * OpenAPI spec version: v1
 * Contact: bsdd_support@buildingsmart.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.rwth_aachen.dc.bsdd_owl.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.File;
import java.io.IOException;
/**
 * UploadImportFileV1Body
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-09-21T11:35:32.475Z[GMT]")
public class UploadImportFileV1Body {
  @SerializedName("OrganizationCode")
  private String organizationCode = null;

  @SerializedName("FormFile")
  private File formFile = null;

  @SerializedName("ValidateOnly")
  private Boolean validateOnly = null;

  public UploadImportFileV1Body organizationCode(String organizationCode) {
    this.organizationCode = organizationCode;
    return this;
  }

   /**
   * Code of the organization owning the domain.  If you do not know the code, contact us (see e-mail address on top of this page)
   * @return organizationCode
  **/
  @Schema(required = true, description = "Code of the organization owning the domain.  If you do not know the code, contact us (see e-mail address on top of this page)")
  public String getOrganizationCode() {
    return organizationCode;
  }

  public void setOrganizationCode(String organizationCode) {
    this.organizationCode = organizationCode;
  }

  public UploadImportFileV1Body formFile(File formFile) {
    this.formFile = formFile;
    return this;
  }

   /**
   * The bsdd import file in json format
   * @return formFile
  **/
  @Schema(required = true, description = "The bsdd import file in json format")
  public File getFormFile() {
    return formFile;
  }

  public void setFormFile(File formFile) {
    this.formFile = formFile;
  }

  public UploadImportFileV1Body validateOnly(Boolean validateOnly) {
    this.validateOnly = validateOnly;
    return this;
  }

   /**
   * Set to true if you only want to validate the file. Even when there are no validation errors the file wil not be imported.  The validation result will not be send via e-mail.
   * @return validateOnly
  **/
  @Schema(description = "Set to true if you only want to validate the file. Even when there are no validation errors the file wil not be imported.  The validation result will not be send via e-mail.")
  public Boolean isValidateOnly() {
    return validateOnly;
  }

  public void setValidateOnly(Boolean validateOnly) {
    this.validateOnly = validateOnly;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadImportFileV1Body uploadImportFileV1Body = (UploadImportFileV1Body) o;
    return Objects.equals(this.organizationCode, uploadImportFileV1Body.organizationCode) &&
        Objects.equals(this.formFile, uploadImportFileV1Body.formFile) &&
        Objects.equals(this.validateOnly, uploadImportFileV1Body.validateOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(organizationCode, Objects.hashCode(formFile), validateOnly);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadImportFileV1Body {\n");
    
    sb.append("    organizationCode: ").append(toIndentedString(organizationCode)).append("\n");
    sb.append("    formFile: ").append(toIndentedString(formFile)).append("\n");
    sb.append("    validateOnly: ").append(toIndentedString(validateOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
